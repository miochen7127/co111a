// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=instruction , b=back , sel = instruction[15] , out = Arin);
    
    // A register
    Mux(a = false , b = true , sel = instruction[15] , out = isC);
    Not(in = isC , out = isA); //不是A指令，就是C指令
    And(a = isC ,b = instruction[5] , out = ALUtoA); //給A的load
    Or(a = isA , b = ALUtoA , out = Aload); //給A的load

    ARegister(in = Arin , load = Aload , out = Arout,out[0..14]=addressM);
    Mux16(a = Arout , b = inM , sel = instruction[12] , out = ALUb);
    And(a = instruction[4] , b = instruction[15] , out = Dload);
    DRegister(in = back , load = Dload , out = ALUa);
    ALU(x = ALUa , y = ALUb ,zx = instruction[11] , nx = instruction[10] , zy = instruction[9] , ny = instruction[8] , f = instruction[7] , no = instruction[6] , out = outM , out = back , zr = zr , ng = ng);
    
    //JUMP
    Mux(a=false,b=true,sel=instruction[2],out=j1);
    Mux(a=false,b=true,sel=instruction[1],out=j2);
    Mux(a=false,b=true,sel=instruction[0],out=j3);
    
    //JMP
    And(a=j3,b=j2,out=jmp0);
    And(a=jmp0,b=j1,out=JMP);

    //JEQ
    And(a=j2,b=zr,out=EQ);

    //JLT
    And(a=j1,b=ng,out=LT);
    
    //JGT
    Not(in=ng,out=nng);
    And(a=nng,b=j3,out=GT0);
    Not(in=zr,out=nzr);
    And(a=nzr,b=GT0,out=GT);


    Or8Way(in[0]=JMP,in[1]=EQ,in[2]=LT,in[3]=GT,in[4..7]=false,out=pcload0);
    And(a=instruction[15],b=pcload0,out=pcload);
    And(a=instruction[3],b=instruction[15],out=writeM);
    PC(in=Arout,load=pcload,reset=reset,inc=true,out[0..14]=pc);
}